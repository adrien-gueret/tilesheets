{"version":3,"sources":["../src/models/Scene.ts","../src/models/Sprite.ts","../src/models/Tilesheet.ts","../index.ts","scripts/tilesheet_bush.ts","scripts/tilesheet_index_sample.ts","scripts/tilesheet_advanced.ts","scripts/scene_sample.ts","scripts/sprite_animated.ts","index.ts"],"names":[],"mappings":"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","file":"examples.351c5903.map","sourceRoot":"..\\examples","sourcesContent":["import Tilesheet from './Tilesheet';\r\n\r\nfunction cloneDeepArrays(arraysToClone) {\r\n    return arraysToClone.map(arr => arr.slice());\r\n}\r\n\r\nclass Scene {\r\n    private initialTiles: Array<Array<number>>;\r\n    private tiles: Array<Array<number>>;\r\n    private tilesheet: Tilesheet;\r\n    private canvas: HTMLCanvasElement;\r\n    private animationClocks: Array<number> = [];\r\n\r\n    constructor(tiles: Array<Array<number>> = [], canvas: HTMLCanvasElement = null) {\r\n        this.initialTiles = cloneDeepArrays(tiles);\r\n        this.tiles = cloneDeepArrays(tiles);\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    getWidth(): number {\r\n        const { width } = this.tilesheet.getTileSize();\r\n        const maxLength = Math.max(...this.tiles.map(row => row.length));\r\n        return width * maxLength;\r\n    }\r\n\r\n    getHeight(): number {\r\n        const { height } = this.tilesheet.getTileSize();\r\n        return this.tiles.length * height;\r\n    }\r\n\r\n    setCanvas(canvas: HTMLCanvasElement): this {\r\n        this.canvas = canvas;\r\n        return this;\r\n    }\r\n\r\n    setTile(x: number, y: number, newTile: number): this {\r\n        this.tiles[y][x] = newTile;\r\n        return this;\r\n    }\r\n\r\n    renderTile(columnIndex: number, rowIndex: number, canvas: HTMLCanvasElement = this.canvas): this {\r\n        const ctx = canvas.getContext('2d');\r\n        const tileIndex = this.tiles[rowIndex][columnIndex];\r\n\r\n        const { x, y, width, height } = this.tilesheet.getTileRect(tileIndex);\r\n\r\n        ctx.drawImage(\r\n            this.tilesheet.getImage(),\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            columnIndex * width,\r\n            rowIndex * height,\r\n            width,\r\n            height,\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    render(canvas: HTMLCanvasElement = this.canvas): this {\r\n        if (!this.tilesheet) {\r\n            throw new Error('Scene::render: tilesheet is not defined.');\r\n        }\r\n\r\n        if (!canvas) {\r\n            throw new Error('Scene::render: no canvas provided.');\r\n        }\r\n\r\n        canvas.width = this.getWidth();\r\n        canvas.height = this.getHeight();\r\n\r\n        this.tiles.forEach((rowTiles, rowIndex) => {\r\n            rowTiles.forEach((tileIndex, columnIndex) => {\r\n                this.renderTile(columnIndex, rowIndex, canvas);\r\n            });\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    resetTiles(): this {\r\n        this.tiles = cloneDeepArrays(this.initialTiles);\r\n        return this;\r\n    }\r\n\r\n    updateTilesFromArray(tiles: Array<number>, currentTileIndex: number): number {\r\n        let nextTileIndex = currentTileIndex + 1;\r\n\r\n        if (!tiles[nextTileIndex]) {\r\n            nextTileIndex = 0;\r\n        }\r\n        \r\n        this.tiles.forEach((rowTiles, rowIndex) => {\r\n            rowTiles.forEach((tileIndex, columnIndex) => {\r\n                if (tileIndex !== tiles[currentTileIndex]) {\r\n                    return;\r\n                }\r\n\r\n                const newTile = tiles[nextTileIndex]\r\n                this.setTile(columnIndex, rowIndex, newTile);\r\n\r\n                if (this.canvas) {\r\n                    this.renderTile(columnIndex, rowIndex);\r\n                }\r\n            });\r\n        });\r\n\r\n        return nextTileIndex;\r\n    }\r\n\r\n    useTilesheet(tilesheet: Tilesheet): this {\r\n        this.tilesheet = tilesheet;\r\n\r\n        this.animationClocks.forEach((clock) => {\r\n            window.clearInterval(clock);\r\n        });\r\n\r\n        this.animationClocks = this.tilesheet.getAnimations().map((animation) => {\r\n            let tileIndex = 0;\r\n\r\n            return window.setInterval(() => {\r\n                tileIndex = this.updateTilesFromArray(animation.tiles, tileIndex);\r\n            }, animation.speed);\r\n        });\r\n    \r\n        return this;\r\n    }\r\n}\r\n\r\nexport default Scene;","import Animation from '../interfaces/Animation';\r\nimport Tilesheet from './Tilesheet';\r\n\r\nexport default class Sprite {\r\n    private tilesheet: Tilesheet;\r\n    private canvas: HTMLCanvasElement;\r\n    private currentTileIndex: number = 0;\r\n    private animationClock: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement = null) {\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    setCanvas(canvas: HTMLCanvasElement): this {\r\n        this.canvas = canvas;\r\n        return this;\r\n    }\r\n\r\n    setCurrentTile(tileIndex: number): this {\r\n        this.currentTileIndex = tileIndex;\r\n        return this;\r\n    }\r\n\r\n    stopAnimation(): this {\r\n        window.clearInterval(this.animationClock);\r\n        return this;\r\n    }\r\n\r\n    updateTilesFromArray(tiles: Array<number>, currentTileIndex: number, shouldLoop: boolean): number {\r\n        let nextTileIndex = currentTileIndex + 1;\r\n\r\n        if (!tiles[nextTileIndex]) {\r\n            nextTileIndex = 0;\r\n\r\n            if (!shouldLoop) {\r\n                this.stopAnimation();\r\n                return nextTileIndex;\r\n            }\r\n        }\r\n        \r\n        this.setCurrentTile(tiles[nextTileIndex]).render();\r\n\r\n        return nextTileIndex;\r\n    }\r\n\r\n    playAnimation(name: string, shouldLoop: boolean = true): this {\r\n        const animation = this.tilesheet.getAnimation(name);\r\n\r\n        if (!animation) {\r\n            throw new Error(`Sprite::playAnimation: animation \"${name}\" not found`);\r\n        }\r\n\r\n        this.stopAnimation();\r\n\r\n        let currentAnimationIndex = 0;\r\n        this.setCurrentTile(animation.tiles[currentAnimationIndex]).render();\r\n\r\n        this.animationClock = window.setInterval(() => {\r\n            currentAnimationIndex = this.updateTilesFromArray(animation.tiles, currentAnimationIndex, shouldLoop);\r\n        }, animation.speed);\r\n\r\n        return this;\r\n    }\r\n\r\n    render(canvas: HTMLCanvasElement = this.canvas, destX: number = 0, destY: number = 0): this {\r\n        const { x, y, width, height } = this.tilesheet.getTileRect(this.currentTileIndex);\r\n\r\n        if (canvas === this.canvas) {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            this.tilesheet.getImage(),\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            destX,\r\n            destY,\r\n            width,\r\n            height,\r\n        );\r\n\r\n        return this;\r\n    }\r\n\r\n    useTilesheet(tilesheet: Tilesheet): this {\r\n        this.tilesheet = tilesheet;\r\n        this.stopAnimation();\r\n        return this;\r\n    }\r\n}","import Animation from '../interfaces/Animation';\r\nimport Rectangle from '../interfaces/Rectangle';\r\n\r\nclass Tilesheet {\r\n    private image: HTMLImageElement;\r\n    private tileWidth: number = 16;\r\n    private tileHeight: number = 16;\r\n    private margin: number = 1;\r\n    private animations: Array<Animation> = [];\r\n\r\n    constructor(imagePath: string) {\r\n        this.image = new Image();\r\n        this.image.src = imagePath;\r\n    }\r\n\r\n    getAnimations(): Array<Animation> {\r\n        return this.animations;\r\n    }\r\n\r\n    getAnimation(name: string): Animation {\r\n        return this.animations.filter(animation => animation.name === name)[0];\r\n    }\r\n\r\n    setAnimations(animations: Array<Animation>): this {\r\n        this.animations = animations;\r\n        return this;\r\n    }\r\n\r\n    getTileSize(): { width: number, height: number } {\r\n        return {\r\n            width: this.tileWidth,\r\n            height: this.tileHeight,\r\n        };\r\n    }\r\n\r\n    setTileSize(width: number, height: number = width): this {\r\n        this.tileWidth = width;\r\n        this.tileHeight = height;\r\n        return this;\r\n    }\r\n\r\n    setMargin(margin: number): this {\r\n        this.margin = margin;\r\n        return this;\r\n    }\r\n\r\n    getImage(): HTMLImageElement {\r\n        return this.image;\r\n    }\r\n\r\n    getTileRect(tileIndex: number): Rectangle {\r\n        if (!this.image.complete) {\r\n            throw new Error('Tilesheets::getTileRect: image is not fully loaded yet.');\r\n        }\r\n\r\n        const { naturalWidth } = this.image;\r\n        const totalTilesOnRow = Math.ceil(naturalWidth / (this.tileWidth + this.margin));\r\n       \r\n        const row = Math.floor(tileIndex / totalTilesOnRow);\r\n        const column = tileIndex % totalTilesOnRow;\r\n\r\n        return {\r\n            x:  column * this.tileWidth + column * this.margin,\r\n            y:  row * this.tileHeight + row * this.margin,\r\n            ...this.getTileSize(),\r\n        };\r\n    }\r\n\r\n    getTileStyle(tileIndex: number): Partial<CSSStyleDeclaration> {\r\n        if (!this.image.complete) {\r\n            throw new Error('Tilesheets::getTileStyle: image is not fully loaded yet.');\r\n        }\r\n\r\n        const rectangle = this.getTileRect(tileIndex);\r\n\r\n        return {\r\n            display: 'inline-block',\r\n            width: `${rectangle.width}px`,\r\n            height: `${rectangle.height}px`,\r\n            backgroundImage: `url(${this.image.src})`,\r\n            backgroundPosition: `-${rectangle.x}px -${rectangle.y}px`,\r\n        };\r\n    }\r\n\r\n    getTileDomElement(tileIndex: number): HTMLSpanElement {\r\n        if (!this.image.complete) {\r\n            throw new Error('Tilesheets::getTileDomElement: image is not fully loaded yet.');\r\n        }\r\n\r\n        const domElement = document.createElement('span');\r\n        const tileStyle = this.getTileStyle(tileIndex);\r\n\r\n        Object.keys(tileStyle).forEach((styleProp) => {\r\n            domElement.style[styleProp] = tileStyle[styleProp];\r\n        });\r\n\r\n        return domElement;\r\n    }\r\n\r\n    async waitForLoading() {\r\n        if (this.image.complete) {\r\n            return;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.image.onload = resolve;\r\n            this.image.onerror = reject;\r\n        });\r\n    }\r\n}\r\n\r\nexport default Tilesheet;","export { default as Scene } from './src/models/Scene';\r\nexport { default as Sprite } from './src/models/Sprite';\r\nexport { default as Tilesheet } from './src/models/Tilesheet';","import { Sprite } from '../../';\r\n\r\nexport default (sheetSpring, sheetFall) => {\r\n    const bushTile = sheetSpring.getTileDomElement(5);\r\n    document.getElementById('bush_sample').appendChild(bushTile);\r\n\r\n    const bush = new Sprite(document.getElementById('canvas_bush_sample') as HTMLCanvasElement);\r\n    bush\r\n        .useTilesheet(sheetSpring)\r\n        .setCurrentTile(5)\r\n        .render();\r\n\r\n    const bush2 = new Sprite(document.getElementById('canvas_bush_sample2') as HTMLCanvasElement);\r\n    bush2\r\n        .useTilesheet(sheetFall)\r\n        .setCurrentTile(5)\r\n        .render();\r\n};","export default (sheetSpring) => {\r\n    const table = document.getElementById('tilesheet_index_sample');\r\n    \r\n    table.style.backgroundImage = `linear-gradient(rgba(255, 255, 255, .7), rgba(255, 255, 255, .7)), url(${sheetSpring.image.src})`;\r\n    table.style.width = `${sheetSpring.image.naturalWidth}px`;\r\n    table.style.height = `${sheetSpring.image.naturalHeight}px`;\r\n\r\n    const rowsFragment = document.createDocumentFragment();\r\n    let tileIndex = 0;\r\n    \r\n    for (let row = 0; row <= 7; row++) {\r\n        const columnsFragment = document.createDocumentFragment();\r\n\r\n        for (let column = 0; column <= 6; column++) {\r\n            const td = document.createElement('td');\r\n            td.appendChild(document.createTextNode(`${tileIndex}`));\r\n            columnsFragment.appendChild(td);\r\n            tileIndex++;\r\n        }\r\n\r\n        const tr = document.createElement('tr');\r\n        tr.appendChild(columnsFragment);\r\n\r\n        rowsFragment.appendChild(tr);\r\n    }\r\n\r\n    table.appendChild(rowsFragment);\r\n};","import { Scene } from '../../';\r\n\r\nexport default (sheetSpring, sheetSummer, sheetFall, sheetWinter) => {\r\n    const scene = new Scene([\r\n        [28, 29, 28, 29, 21, 22, 28, 29, 21, 22, 21, 22, 28, 29,  0,  0, 11, 42, 47, 47],\r\n        [ 8, 25, 26, 27, 28, 29,  5,  5, 28, 29, 28, 29,  5,  5,  5,  6,  5, 42, 47, 47],\r\n        [ 4, 32, 33, 34, 21, 22,  8,  8,  2,  3,  4, 21, 22, 17, 13,  5,  5, 42, 47, 47],\r\n        [17, 14, 14, 14, 28, 29,  8,  8,  9, 10,  7, 28, 29, 36, 36, 36, 36, 51, 47, 47],\r\n        [21, 22, 23, 24, 13, 13,  3,  3, 10, 10,  0, 11, 42, 38, 38, 38, 47, 47, 47, 47],\r\n        [28, 29, 30, 31, 13, 21, 22,  6,  1, 10,  0, 11, 42, 38, 38, 38, 47, 47, 47, 47],\r\n        [22,  2,  3,  3,  7, 28, 29,  6,  1,  7,  7, 18, 42, 45, 46, 45, 35, 50, 50, 50],\r\n        [29, 16,  7,  7,  0,  1,  1, 21, 22, 21, 22,  8, 42, 45, 45, 46, 44,  8,  8,  8],\r\n        [21, 22,  9,  0,  0,  0,  7, 28, 29, 28, 29, 21, 22, 50, 50, 50,  8,  2,  3,  3],\r\n    ], document.getElementById('canvas_advanced') as HTMLCanvasElement);\r\n\r\n    let activeButton: HTMLButtonElement;\r\n\r\n    function switchSeason(season) {\r\n        const seasonToTilesheet = {\r\n            spring: sheetSpring,\r\n            summer: sheetSummer,\r\n            fall: sheetFall,\r\n            winter: sheetWinter,\r\n        };\r\n\r\n        activeButton = document.querySelector(`[data-season=\"${season}\"]`);\r\n        activeButton.disabled = true;\r\n        activeButton.classList.add('is-outlined');\r\n\r\n        scene\r\n            .resetTiles()\r\n            .useTilesheet(seasonToTilesheet[season])\r\n            .render();\r\n    }\r\n\r\n    document.body.addEventListener('click', (e) => {\r\n        const target = e.target as HTMLButtonElement;\r\n\r\n        if (!target.dataset.season) {\r\n            return;\r\n        }\r\n\r\n        activeButton.disabled = false;\r\n        activeButton.classList.remove('is-outlined');\r\n\r\n        switchSeason(target.dataset.season);\r\n       \r\n        e.preventDefault();\r\n    });\r\n\r\n    switchSeason('spring');\r\n};","import { Scene } from '../../';\r\n\r\nexport default (sheetSpring, sheetWinter) => {\r\n    const tiles = [\r\n        [21, 22, 23, 24,  9],\r\n        [28, 29, 30, 31,  9],\r\n        [22,  5,  3,  6, 10],\r\n        [29,  5, 17, 17, 18],\r\n    ];\r\n\r\n    const springSceneCanvas = document.getElementById('scene_sample') as HTMLCanvasElement;\r\n    const mySpringScene = new Scene(tiles, springSceneCanvas);\r\n\r\n    mySpringScene\r\n        .useTilesheet(sheetSpring)\r\n        .render();\r\n\r\n    const winterSceneCanvas = document.getElementById('scene_sample_winter') as HTMLCanvasElement;\r\n    const myWinterScene = new Scene(tiles, winterSceneCanvas);\r\n\r\n    myWinterScene\r\n        .useTilesheet(sheetWinter)\r\n        .render();\r\n\r\n    const tilesWithSomeAnimation = [\r\n        [ 1,  1,  1,  1,  1],\r\n        [17, 17, 17, 17, 17],\r\n        [36, 36, 36, 36, 36],\r\n        [38, 38, 38, 38, 38],\r\n    ];\r\n\r\n    const animatedSceneCanvas = document.getElementById('scene_sample_animation') as HTMLCanvasElement;\r\n    const myAnimatedScene = new Scene(tilesWithSomeAnimation, animatedSceneCanvas);\r\n\r\n    myAnimatedScene\r\n        .useTilesheet(sheetSpring)\r\n        .render();\r\n};","import { Sprite } from '../../';\r\n\r\nexport default (sheetSpring) => {\r\n    const flowers = new Sprite(document.getElementById('canvas_sprite_animated') as HTMLCanvasElement);\r\n    \r\n    flowers\r\n        .useTilesheet(sheetSpring)\r\n        .playAnimation('flower')\r\n        .render();\r\n\r\n    const advancedSprite = new Sprite(document.getElementById('canvas_sprite_animated_advanced') as HTMLCanvasElement);\r\n    advancedSprite.useTilesheet(sheetSpring);\r\n\r\n    let activeButton: HTMLButtonElement;\r\n\r\n    function switchAnimation(newAnimation) {\r\n        const possibleAnimations = ['water', 'flower'];\r\n\r\n        activeButton = document.querySelector(`[data-animation=\"${newAnimation}\"]`);\r\n        activeButton.disabled = true;\r\n        activeButton.classList.add('is-outlined');\r\n    \r\n        if (possibleAnimations.indexOf(newAnimation) >= 0) {\r\n            advancedSprite.playAnimation(newAnimation).render();\r\n        } else {\r\n            advancedSprite.stopAnimation();\r\n        }\r\n    }\r\n\r\n    document.body.addEventListener('click', (e) => {\r\n        const target = e.target as HTMLButtonElement;\r\n\r\n        if (!target.dataset.animation) {\r\n            return;\r\n        }\r\n\r\n        activeButton.disabled = false;\r\n        activeButton.classList.remove('is-outlined');\r\n\r\n        switchAnimation(target.dataset.animation);\r\n       \r\n        e.preventDefault();\r\n    });\r\n\r\n    switchAnimation('flower');\r\n};","import { Tilesheet } from '../';\r\n\r\nimport tilesheetBushSample from './scripts/tilesheet_bush';\r\nimport tilesheetIndexSample from './scripts/tilesheet_index_sample';\r\nimport tilesheetAdvanced from './scripts/tilesheet_advanced';\r\nimport sceneSample from './scripts/scene_sample';\r\nimport spriteAnimated from './scripts/sprite_animated';\r\n\r\nimport imageSpring from './images/spring.png';\r\nimport imageSummer from './images/summer.png';\r\nimport imageFall from './images/fall.png';\r\nimport imageWinter from './images/winter.png';\r\n\r\n(async () => {\r\n    const sheetSpring = new Tilesheet(imageSpring);\r\n    const sheetSummer = new Tilesheet(imageSummer);\r\n    const sheetFall = new Tilesheet(imageFall);\r\n    const sheetWinter = new Tilesheet(imageWinter);\r\n\r\n    const animationSpeed = 300;\r\n    const waterAnimation = {\r\n        tiles: [38, 39, 40, 41],\r\n        speed: animationSpeed,\r\n        name: 'water',\r\n    };\r\n    const driedWater1Animation = {\r\n        tiles: [45, 39],\r\n        speed: animationSpeed,\r\n    };\r\n    const driedWater2Animation = {\r\n        tiles: [46, 39],\r\n        speed: animationSpeed,\r\n    };\r\n    const frozenWaterAnimation = {\r\n        tiles: [47, 39],\r\n        speed: animationSpeed,\r\n    };\r\n    const flowersAnimation = {\r\n        tiles: [1, 12, 19, 20],\r\n        speed: animationSpeed,\r\n        name: 'flower',\r\n    };\r\n\r\n    sheetSpring.setAnimations([waterAnimation, driedWater1Animation, driedWater2Animation, frozenWaterAnimation, flowersAnimation]);\r\n    sheetSummer.setAnimations([waterAnimation, frozenWaterAnimation, flowersAnimation]);\r\n    sheetFall.setAnimations([waterAnimation, driedWater1Animation, driedWater2Animation, frozenWaterAnimation]);\r\n    sheetWinter.setAnimations([waterAnimation, driedWater1Animation, driedWater2Animation]);\r\n    \r\n    const allSheets = [sheetSpring, sheetSummer, sheetFall, sheetWinter];\r\n    \r\n    allSheets.forEach((sheet) => {\r\n        sheet.setTileSize(16).setMargin(1);\r\n    });\r\n    \r\n    await Promise.all(allSheets.map(sheet => sheet.waitForLoading()));\r\n\r\n    tilesheetIndexSample(sheetSpring);\r\n    tilesheetBushSample(sheetSpring, sheetFall);\r\n    spriteAnimated(sheetSpring);\r\n    sceneSample(sheetSpring, sheetWinter);\r\n    tilesheetAdvanced(sheetSpring, sheetSummer, sheetFall, sheetWinter);    \r\n})();"]}